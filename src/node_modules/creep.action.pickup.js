const ActionNode = require('tree.node.action')

class Pickup extends ActionNode {
  tick (context) {
    var creep = context.actor

    if (_.sum(creep.carry) === 0) {
      creep.memory.canPickup = true
    }

    var carry = _.sum(creep.carry)
    if (carry === creep.carryCapacity) {
      creep.memory.canPickup = false
    }

    this.log(context, `lastDropSite: ${creep.memory.lastDropSite} carry: ${carry}/${creep.carryCapacity} canPickup: ${creep.memory.canPickup}`)

    if (!creep.memory.canPickup) {
      return SUCCESS
    }

    if (creep.memory.lastDropSite) {
      const lastDropSite = Game.getObjectById(creep.memory.lastDropSite)
      if (lastDropSite) {
        this.log(context, 'DropSite is still there')
        if (creep.pickup(lastDropSite) === ERR_NOT_IN_RANGE) {
          creep.moveTo(lastDropSite)
        }
        return RUNNING
      }

      creep.memory.lastDropSite = null
    }

    const drops = creep.room.find(FIND_DROPPED_ENERGY)

    if (drops.length === 0) {
      return FAILURE
    }

    this.log(context, 'Picked dropSite randomly')
    var dropSite = _.sample(drops)
    creep.memory.lastDropSite = dropSite.id
    creep.moveTo(dropSite)

    return RUNNING
  }
}

module.exports = Pickup
