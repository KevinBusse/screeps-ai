/**
 * Harvest Trait
 * When the creep requires energy it will harvest it from a source.
 *
 * @param {Creep} creep
 * @returns {boolean} whether a task was assigned or not
 */
module.exports = (creep) => {
  // Creeps without the ability to carry and work should be skipped
  if (creep.getActiveBodyParts(CARRY) === 0 || creep.getActiveBodyParts(WORK) === 0) {
    return false
  }

  /** @var {Boolean} creep.memory.harvesting */
  // Prepare memory.
  if (typeof creep.memory.harvesting === 'undefined') {
    creep.memory.harvesting = true
  }

  // Creep run out of energy, switching to harvesting mode.
  if (creep.carry.energy === 0) {
    creep.memory.harvesting = true
  }

  // Creep is full of energy, stop harvesting.
  if (creep.carry.energy === creep.carryCapacity) {
    creep.memory.harvesting = false
  }

  // When no harvesting necessary, then skip further execution.
  if (!creep.memory.harvesting) {
    return false
  }

  // When creep is in targeting mode, then use source close to the desired target.
  var targetPosition = creep.pos
  if (typeof creep.memory.target !== 'undefined') {
    targetPosition = creep.memory.target
  }

  var source = targetPosition.findClosestByRange(FIND_SOURCES)
  // No source can be found, so nothing to harvest.
  if (!source) {
    return false
  }

  // Try to harvest.
  switch (creep.harvest(source)) {
    // When not in range try to move closer.
    case ERR_NOT_IN_RANGE:
      var moveStatus = creep.moveTo(target)
      return (moveStatus === OK) || (moveStatus = ERR_TIRED)
    // Creep is harvesting.
    case OK:
      return true
    // Something other error, so we didn't assign a task after all.
    default:
      return false
  }
}
