module.exports = {

  spawn: function (desired) {
    const roleName = 'digger';
    var spawnPoint = Game.spawns[Object.keys(Game.spawns)[0]];
    var active = _.filter(Game.creeps, (creep) => creep.memory.role === roleName);
    var energyShare = Math.floor(0.8 * spawnPoint.room.energyCapacityAvailable);


    if (active.length < desired) {
      if (spawnPoint.room.energyAvailable < energyShare) {
        return false;
      }

      //Calculate remaining energy for WORK genes
      let maxWork = Math.floor((spawnPoint.room.energyAvailable - 50 ) / 100);
      let dna = [MOVE]; //Costs: Move 50, WORK 100

      //todo: limit to 5 WORK... 
      while (maxWork--) {
        dna.push(WORK);
      }
      let newCreep = spawnPoint.createCreep(dna, '', {role: roleName, sourceId: false});
      console.log('SPAWN DIGGER ' + JSON.stringify(dna) + ' ' + newCreep);
      return true;
    }
    return false;

  },

  /** @param {Creep} creep **/
  run: function (creep) {

    function findSource(creep, exclude) {
      if (!exclude) {
        exclude = [];
      }

      let sources = Game.rooms[creep.room.name].find(FIND_SOURCES_ACTIVE,{
        filter: (source) => {
          return (exclude.indexOf(source.id) === -1);
        }
      });

      const sourcePreference = {
        preferred: null,
        creeps: 10000
      };

      sources.forEach( (source, index) => {
        let scanResult = creep.room.lookForAtArea(
            LOOK_CREEPS,
            source.pos.y-2,
            source.pos.x-2,
            source.pos.y+2,
            source.pos.x+2,
            true
        );

        if (sourcePreference.creeps > scanResult.length ) {
          sourcePreference.creeps = scanResult.length;
          sourcePreference.preferred = source;
        }

      });

      return sourcePreference.preferred;
    }

    var targetSource = false;

    if (creep.memory.sourceId === false) {
      //let source = creep.pos.findClosestByRange(FIND_SOURCES_ACTIVE);

      let source = findSource(creep);

      targetSource = source;
      creep.memory.sourceId = source.id;

    }


    if (targetSource === false) {
      targetSource = Game.getObjectById(creep.memory.sourceId);
    }


    if (!targetSource) {
      creep.memory.sourceId = false;
      return console.log('Failed to locate source ' + creep.memory.sourceId);
    }

    if (creep.harvest(targetSource) === ERR_NOT_IN_RANGE) {
      creep.moveTo(targetSource);
    }

  }
};