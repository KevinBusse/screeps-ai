const CompositeNode = require('tree.node.composite')

/**
 * Selector
 *
 * This composite pattern describes child nodes that are processed consecutively and in
 * sequence only until one succeeds. As soon as one child node succeeds, the parent node
 * succeeds immediately and stops processing child nodes. If all child nodes are attempted
 * and all fail, the parent node fails. This pattern is useful for setting up AI agents to
 * try multiple different tactics, or for creating fallback behaviors to handle unexpected
 * outcomes.
 */
class Selector extends CompositeNode {
  tick (context) {
    var status = FAILURE
    this.nodes.forEach((node) => {
      if (status !== FAILURE) {
        return
      }

      this.log(context, `Executing ${node.id}`)
      status = node.execute(context)
    })
    return status
  }
}

module.exports = Selector
