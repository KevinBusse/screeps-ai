var sort = require('sort')
var filter = require('filter')

/**
 * Repair Trait
 * Repair anything that's up for repair, prioritize
 * - ...
 *
 * TODO: prioritze structres
 * TODO: remember current repair target (keep repairing)
 *
 * @param {Creep} creep
 * @returns {boolean} whether a task was assigned or not
 */
module.exports = (creep) => {
  // Identify structures that require repair.
  var repairTargets = creep.room.find(FIND_STRUCTURES, {
    filter: structure => filter.needsRepair(structure) && filter.sameRoom(creep, structure)
  })

  // When nothing requires repair skip repair trait.
  if (repairTargets.length === 0) {
    return false
  }

  // Prioritize sort repair target.
  repairTargets.sort(sort.structuresByHits)

  // Choose a target.
  var target = repairTargets[0]

  // Try to repair.
  switch (creep.repair(target)) {
    // When not in range try to move closer.
    case ERR_NOT_IN_RANGE:
      return creep.moveTo(target) === OK
    // Creep is harvesting.
    case OK:
      return true
    // Something other error, so we didn't assign a task after all.
    default:
      return false
  }
}
