const CompositeNode = require('tree.node.composite')

/**
 * Sequence
 *
 * This composite pattern describes child nodes that are processed consecutively in a specified
 * sequence. All child nodes are processed regardless of whether the previous child node succeeded
 * or failed. For example, a sequential node might cause an AI monster to point at the player,
 * roar, and then run toward the player. In this pattern, each child node in the sequence must
 * succeed for the next child node to start processing; if any child node fails, the parent node
 * immediately fails and processing is stopped.
 */
class Sequence extends CompositeNode {
  tick (context) {
    var status = SUCCESS
    this.nodes.forEach((node) => {
      if (status !== SUCCESS) {
        return
      }

      status = node.execute(context)
    })
    return status
  }
}

module.exports = Sequence
