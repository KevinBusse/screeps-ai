module.exports = {
  getCreepBody: (room, job) => {
    let energyAvailable = room.energyAvailable
    let body = [CARRY, WORK, MOVE]

    energyAvailable -= BODYPART_COST[CARRY] + BODYPART_COST[WORK] + BODYPART_COST[MOVE]

    for (let i = Math.min(3, energyAvailable / (BODYPART_COST[CARRY] * 2 + BODYPART_COST[MOVE])); i >= 1; i--) {
      body.push(MOVE)
      body.unshift(CARRY)
      body.unshift(CARRY)
    }

    return body
  },
  execute: (creep, job) => {
    if (creep.memory.carrying && creep.carry.energy === 0) {
      creep.memory.carrying = false
    }

    if (!creep.memory.carrying && creep.carry.energy === creep.carryCapacity) {
      creep.memory.carrying = true
    }

    if (!creep.memory.carrying) {
      const position = Game.flags[job.flag].pos

      if (creep.pos.x !== position.x || creep.pos.y !== position.y || creep.pos.room !== position.room) {
        creep.moveTo(position)
        return
      }

      const droppedEnergy = creep.pos.findInRange(FIND_DROPPED_ENERGY, 1)
      if (droppedEnergy.length > 0) {
        creep.pickup(droppedEnergy[0])
      }

      const container = creep.pos.findInRange(
        FIND_STRUCTURES,
        1,
        {
          filter: structure => structure.structureType === STRUCTURE_CONTAINER && structure.energy > 0
        }
      )
      if (container.length > 0) {
        creep.withdraw(container[0])
      }
      return
    }

    if (creep.memory.job.home) {
      // TODO: implement build streets & repair
      // console.log(creep.name, 'looking for sites')
      var constructionSites = creep.pos.findInRange(FIND_MY_CONSTRUCTION_SITES, 3)
      if (constructionSites.length > 0) {
        creep.build(constructionSites[0])
        // return
      }
    }

    if (creep.memory.job.home && creep.memory.job.home !== creep.room.name && Game.rooms[creep.memory.job.home]) {
      creep.moveTo(Game.rooms[creep.memory.job.home].controller)
      return
    }

    const transferTarget = creep.pos.findClosestByRange(FIND_STRUCTURES, {
      filter: structure => structure.energy < structure.energyCapacity
    })

    if (transferTarget) {
      if (creep.transfer(transferTarget, RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {
        creep.moveTo(transferTarget)
      }
      return
    }

    if (creep.upgradeController(creep.room.controller) === ERR_NOT_IN_RANGE) {
      creep.moveTo(creep.room.controller)
    }
  }
}
