const ActionNode = require('tree.node.action')

class BuildExtensions extends ActionNode {
  tick (context) {
    var room = context.actor
    var possibleExtensions = CONTROLLER_STRUCTURES[STRUCTURE_EXTENSION][room.controller.level]
    var existingExtensions = room.find(FIND_MY_STRUCTURES, {
      filter: structure => structure.structureType === STRUCTURE_EXTENSION}
    ).length

    this.log(context, `[Room ${room.name}] ${existingExtensions} / ${possibleExtensions} extensions`)
    if (existingExtensions >= possibleExtensions) {
      this.log(context, `[Room ${room.name}] No more extensions available`)
      return FAILURE
    }

    var extensionsInContruction = room.find(FIND_MY_CONSTRUCTION_SITES, {
      filter: site => site.structureType === STRUCTURE_EXTENSION
    }).length
    if (extensionsInContruction > 0) {
      this.log(context, `[Room ${room.name}] An extensions is still under construction`)
      return RUNNING
    }

    var spawn = room.find(FIND_MY_SPAWNS)[0]
    if (!spawn) {
      this.log(context, `[Room ${room.name}] No spawn found to align extensions`)
      return FAILURE
    }

    var findPlains = (x, y) => {
      var terrain = room.lookForAtArea(LOOK_TERRAIN, y - 1, x - 1, y + 1, x + 1, true)
      return _.filter(terrain, pos => pos.terrain !== 'wall').length
    }

    for (var i = 2; i < 25; i++) {
      if (i % 4 === 2) {
        continue
      }
      var steps = 2 - i % 2
      var step = 0
      var x = 0
      var y = -i
      for (; x < i; x++, y++, step++) {
        if (step % steps === 0) {
          if (room.lookForAt(LOOK_STRUCTURES, spawn.pos.x + x, spawn.pos.y + y).length !== 0) {
            continue
          }
          if (findPlains(spawn.pos.x + x, spawn.pos.y + y) === 9) {
            if (room.createConstructionSite(spawn.pos.x + x, spawn.pos.y + y, STRUCTURE_EXTENSION) === OK) {
              this.log(context, `[Room ${room.name}] An extension construction has been issued`)
              return RUNNING
            }
          }
        }
      }
      for (; y < i; x--, y++, step++) {
        if (step % steps === 0) {
          if (room.lookForAt(LOOK_STRUCTURES, spawn.pos.x + x, spawn.pos.y + y).length !== 0) {
            continue
          }
          if (findPlains(spawn.pos.x + x, spawn.pos.y + y) === 9) {
            if (room.createConstructionSite(spawn.pos.x + x, spawn.pos.y + y, STRUCTURE_EXTENSION) === OK) {
              this.log(context, `[Room ${room.name}] An extension construction has been issued`)
              return RUNNING
            }
          }
        }
      }
      for (; x > -i; x--, y--, step++) {
        if (step % steps === 0) {
          if (room.lookForAt(LOOK_STRUCTURES, spawn.pos.x + x, spawn.pos.y + y).length !== 0) {
            continue
          }
          if (findPlains(spawn.pos.x + x, spawn.pos.y + y) === 9) {
            if (room.createConstructionSite(spawn.pos.x + x, spawn.pos.y + y, STRUCTURE_EXTENSION) === OK) {
              this.log(context, `[Room ${room.name}] An extension construction has been issued`)
              return RUNNING
            }
          }
        }
      }
      for (; y > -i; x++, y--, step++) {
        if (step % steps === 0) {
          if (room.lookForAt(LOOK_STRUCTURES, spawn.pos.x + x, spawn.pos.y + y).length !== 0) {
            continue
          }
          if (findPlains(spawn.pos.x + x, spawn.pos.y + y) === 9) {
            if (room.createConstructionSite(spawn.pos.x + x, spawn.pos.y + y, STRUCTURE_EXTENSION) === OK) {
              this.log(context, `[Room ${room.name}] An extension construction has been issued`)
              return RUNNING
            }
          }
        }
      }
    }

    return FAILURE
  }
}

module.exports = BuildExtensions
