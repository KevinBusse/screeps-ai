class Node {
  constructor (id) {
    this.id = id
  }

  log (context, ...args) {
    if ((context.memory && context.memory.debug) || (this.params && this.params.debug)) {
      console.log(...args)
    }
  }

  getTreeMemory (context) {
    var memory = context.memory.trees[context.tree.id]
    memory.isOpen = memory.isOpen || {}
    memory.nodes = memory.nodes || {}
    return memory
  }

  getNodeMemory (context) {
    var treeMemory = this.getTreeMemory(context)
    treeMemory.nodes[this.id] = treeMemory.nodes[this.id] || {}
    return treeMemory.nodes[this.id]
  }

  execute (context) {
    var treeMemory = this.getTreeMemory(context)

    this.enter(context)

    if (!treeMemory.isOpen[this.id]) {
      treeMemory.isOpen[this.id] = true
      this.open(context)
    }

    var status = this.tick(context)
    this.log(context, `[${this.id}] status: ${status}`)

    if (status !== RUNNING) {
      treeMemory.isOpen[this.id] = false
      this.close(context)
    }

    this.exit(context)

    return status
  }

  enter (context) {
    this.log(context, `[${this.id}] enter`)
  }

  open (context) {
    this.log(context, `[${this.id}] open`)
  }

  tick (context) {
    this.log(context, `[${this.id}] tick`)
    return SUCCESS
  }

  close (context) {
    this.log(context, `[${this.id}] close`)
  }

  exit (context) {
    this.log(context, `[${this.id}] exit`)
  }
}

module.exports = Node
