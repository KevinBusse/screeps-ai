class Node {
  constructor (id) {
    this.id = id
  }

  log (context, ...args) {
    if ((context.memory && context.memory.debug) || (this.params && this.params.debug)) {
      console.log(context.actor, `[${context.tree.id}.${this.id}]`, ...args)
    }
  }

  getNodeMemory (context) {
    var treeMemory = context.treeMemory
    treeMemory.nodes[this.id] = treeMemory.nodes[this.id] || {}

    return treeMemory.nodes[this.id]
  }

  getGlobalNodeMemory (context) {
    var treeMemory = context.globalTreeMemory
    treeMemory.nodes[this.id] = treeMemory.nodes[this.id] || {}

    return treeMemory.nodes[this.id]
  }

  execute (context) {
    var treeMemory = context.treeMemory
    this.log(context, 'enter')

    this.enter(context)

    if (!treeMemory.isOpen[this.id]) {
      treeMemory.isOpen[this.id] = true
      this.log(context, 'open')
      this.open(context)
    }

    this.log(context, 'tick')
    var status = this.tick(context)
    this.log(context, 'tick -->', status)

    if (status !== RUNNING && status !== SUCCESS && status !== FAILURE) {
      console.log(`Invalid status after tick: "${status}"`)
    }

    if (status !== RUNNING) {
      treeMemory.isOpen[this.id] = false
      this.log(context, 'close')
      this.close(context)
    }

    this.log(context, 'exit')
    this.exit(context)

    return status
  }

  enter (context) {
  }

  open (context) {
  }

  tick (context) {
    return SUCCESS
  }

  close (context) {
  }

  exit (context) {
  }
}

module.exports = Node
