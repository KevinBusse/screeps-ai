const ActionNode = require('tree.node.action')

class BuildStructure extends ActionNode {
  tick (context) {
    var structureType = this.params.structureType
    var room = context.actor
    var possibleStructures = CONTROLLER_STRUCTURES[structureType][room.controller.level]
    var existingStructures = room.find(FIND_MY_STRUCTURES, {
      filter: structure => structure.structureType === structureType}
    ).length

    this.log(context, `[Room ${room.name}] ${existingStructures} / ${possibleStructures} ${structureType}s`)
    if (existingStructures >= possibleStructures) {
      this.log(context, `[Room ${room.name}] No more ${structureType}s available`)
      return FAILURE
    }

    var extensionsInContruction = room.find(FIND_MY_CONSTRUCTION_SITES, {
      filter: site => site.structureType === structureType
    }).length
    if (extensionsInContruction > 0) {
      this.log(context, `[Room ${room.name}] ${structureType} is still under construction`)
      return RUNNING
    }

    var spawn = room.find(FIND_MY_SPAWNS)[0]
    if (!spawn) {
      this.log(context, `[Room ${room.name}] No spawn found to align ${structureType}`)
      return FAILURE
    }

    var tryBuildAt = (x, y) => {
      if (room.lookForAt(LOOK_STRUCTURES, x, y).length !== 0) {
        return false
      }

      if (room.createConstructionSite(x, y, structureType) === OK) {
        this.log(context, `[Room ${room.name}] A ${structureType} construction has been issued`)
        return true
      }

      return false
    }

    var building = false
    building = building || tryBuildAt(spawn.pos.x, spawn.pos.y - 1)
    building = building || tryBuildAt(spawn.pos.x - 1, spawn.pos.y)
    building = building || tryBuildAt(spawn.pos.x + 1, spawn.pos.y)
    building = building || tryBuildAt(spawn.pos.x, spawn.pos.y + 1)

    return building ? RUNNING : FAILURE
  }
}

module.exports = BuildStructure
