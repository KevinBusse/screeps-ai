const DecoratorNode = require('tree.node.decorator')

/**
 * Loop
 *
 * Looping functionality can be used to process any other node multiple times. Rather than
 * creating custom nodes every time you want to repeat a task, you can wrap any node in a
 * parent loop decorator node. By setting a parameter for the loop node, you can dictate the
 * number of times the child nodes will be processed. Each time the child node succeeds, the
 * loop node count is updated and the child node is re-processed. Once the loop count meets
 * the set parameter, the loop node succeeds.
 */
class Loop extends DecoratorNode {
  tick (context) {
    return FAILURE
    // this.node.execute(context)
    // TODO: implement
  }
}

module.exports = Invert
