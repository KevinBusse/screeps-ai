module.exports = {
  /** @param {Creep} creep **/
  run: function (creep) {

    if (creep.memory.building && creep.carry.energy === 0) {
      creep.memory.building = false;
    }
    if (!creep.memory.building && creep.carry.energy === creep.carryCapacity) {
      creep.memory.building = true;
    }

    if (creep.memory.building) {
      var target = creep.pos.findClosestByRange(FIND_CONSTRUCTION_SITES);
      if (target) {
        if (creep.build(target) === ERR_NOT_IN_RANGE) {
          creep.moveTo(target);
        }
      } else {
        var repairTargets = creep.room.find(FIND_STRUCTURES, {
          filter: object => object.hits < object.hitsMax && object.room === creep.room
        });

        repairTargets.sort((a, b) => a.hits - b.hits);

        if (repairTargets.length > 0) {
          if (creep.repair(repairTargets[0]) === ERR_NOT_IN_RANGE) {
            creep.moveTo(repairTargets[0]);
          }
        }
      }
    } else {

      var targets = creep.room.find(FIND_STRUCTURES, {
            filter: (structure) => {
              return (structure.structureType === STRUCTURE_EXTENSION ||
                  structure.structureType === STRUCTURE_SPAWN) && structure.energy > 0;
            }
          });

      if (targets.length > 0) {
        var energySource = creep.pos.findClosestByRange(targets);

        let result = energySource.transferEnergy(creep);

        if (result === ERR_NOT_IN_RANGE) {
          creep.moveTo(energySource);
        }
      }


    }

  }
};
