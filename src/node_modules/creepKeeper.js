module.exports = {
  findSource: function (exclude) {
    var out = [];
    if (!exclude) {
      exclude = [];
    }
    
    for (var roomName in Game.rooms) {
      var sources = Game.rooms[roomName].find(FIND_SOURCES);
      sources.forEach(source => {


        if (exclude.indexOf(source.id) === -1) {

          out.push(source.id);
        }

      });
    }
    return out;
  },
  spawn: function (room) {
    /*
     configuration holds dna config for roles depending on controller
     level (assuming) max Energy storage per level is ensured by default
     */
    
    //Step 1. get room metrics... max energy/ current energy, level spawn point, number creeps & types, number enemies, types of resources available 
    
    //Step 2. load Creep Config
    
  },


  recycle: function (creep) {

    if (creep.ticksToLive < 10) {

      creep.say('Recycle... ');
      creep.drop(RESOURCE_ENERGY,creep.carry.energy);
      /*
      var spawn = creep.pos.findClosestByPath(FIND_MY_SPAWNS);
      if (!spawn) {
        spawn = creep.pos.findClosestByRange(FIND_MY_SPAWNS);
      }
      console.log(spawn.energy + ' / ' + spawn.energyCapacity + ' Spawn energy...');
      if (creep.transfer(spawn, RESOURCE_ENERGY, creep.carry.energy) === ERR_NOT_IN_RANGE) {

        creep.moveTo(spawn);
      } else {
        console.log('Transfered remaining energy');
      }


      if (spawn.recycleCreep(creep) === ERR_NOT_IN_RANGE) {

        creep.moveTo(spawn);
      } else {
        console.log(spawn.energy + ' / ' + spawn.energyCapacity + ' Recycle done');
        console.log('Creep ' + creep.name + ' reached spawn ' + spawn.name + ' commencing recycle. Good bye.');
      }
      //recycle in progress */
      return true;

    }
    return false;
  }
};