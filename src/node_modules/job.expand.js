// const job = {
//   type: 'expand',
//   creep: 'creepname',
//   flag: 'flagname'
// }

module.exports = {
  getCreepBody: (room, job) => {
    let energyAvailable = room.energyAvailable
    const body = []
    const costs = BODYPART_COST[WORK] + BODYPART_COST[CARRY] + BODYPART_COST[MOVE]

    for (let i = Math.min(2, energyAvailable / costs); i >= 1; i--) {
      body.push(WORK)
      body.push(CARRY)
      body.push(MOVE)
    }

    return body
  },
  execute: (creep, job) => {
    var position = Game.flags[job.flag].pos

    if (creep.pos.roomName !== position.roomName) {
      console.log(`[${job.type} ${creep.name}] Moving into position ${creep.pos.roomName} --> ${position.roomName}`)
      creep.moveTo(position)
      return
    }

    if (creep.memory.expanding && creep.carry[RESOURCE_ENERGY] === 0) {
      creep.memory.expanding = false
    }

    if (!creep.memory.expanding && creep.carry[RESOURCE_ENERGY] === creep.carryCapacity) {
      creep.memory.expanding = true
    }

    if (!creep.memory.expanding) {
      var source
      if (creep.memory.source) {
        source = Game.getObjectById(creep.memory.source)
      } else {
        source = position.findInRange(FIND_SOURCES, 1)
        if (source.length > 0) {
          source = source[0]
          creep.memory.source = source.id
        }
      }
      if (creep.harvest(source) === ERR_NOT_IN_RANGE) {
        creep.moveTo(position)
      }

      return
    }

    var constructionSite = creep.pos.findClosestByRange(FIND_CONSTRUCTION_SITES)
    if (constructionSite) {
      if (creep.build(constructionSite) === ERR_NOT_IN_RANGE) {
        creep.moveTo(constructionSite)
      }
      return
    }

    if (creep.upgradeController(creep.room.controller) === ERR_NOT_IN_RANGE) {
      creep.moveTo(creep.room.controller)
    }
  }
}
